// Function to create a circular canvas from a cropped image
function getRoundedCanvas(sourceCanvas) {
  const canvas = document.createElement('canvas');
  const context = canvas.getContext('2d');
  const width = sourceCanvas.width;
  const height = sourceCanvas.height;

  // Set canvas dimensions
  canvas.width = width;
  canvas.height = height;

  // Draw the image onto the canvas
  context.drawImage(sourceCanvas, 0, 0, width, height);

  // Create a circular clipping path
  context.globalCompositeOperation = 'destination-in';
  context.beginPath();
  context.arc(width / 2, height / 2, Math.min(width, height) / 2, 0, 2 * Math.PI);
  context.fill();

  return canvas;
}

window.addEventListener('DOMContentLoaded', () => {
  const imageElement = document.getElementById('image');
  const cropButton = document.getElementById('btn-crop');

  // Initialize Cropper with zoomable disabled
  const cropper = new Cropper(imageElement, {
    aspectRatio: 1, // Keep the aspect ratio square
    zoomable: false, // Disable zoom with mouse wheel or gestures
    viewMode: 1, // Restrict the cropping box inside the canvas
    autoCropArea: 1, // Ensure the cropping box covers the image entirely by default
    movable: true, // Allow moving the image within the crop box
    rotatable: false, // Disable rotation
    scalable: false, // Disable scaling
  });

  // Add click event to crop button
  cropButton.addEventListener('click', () => {
    let croppedCanvas = cropper.getCroppedCanvas();
    let roundedCanvas = getRoundedCanvas(croppedCanvas); // Make the cropped image round

    // Display the rounded cropped image in the output section
    document.querySelector('#output').src = roundedCanvas.toDataURL();
    document.querySelector('.cropped-container').style.display = 'block';
  });
});
// Comments generated by ChatGPT